//Note:In this file both frontend and backend logic is included
//HTML form view 

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>3D shape creator</title>
    <style>
        body{
             background-color: aliceblue;
        }
           .container{
            width:62%;
             height: 170px;
             border-radius: 10px;
             border: 2px solid black;
             margin-left: 230px;
             background-color: burlywood;
           }
           label{
             font-size: 20px;
             font-family: sans-serif;
           
        }
        .functions{
             padding: 5px;
             padding-left: 40px;
        }
        .option{
             padding: 10px;
        }
        input{
            margin-bottom: 10px;
            border: none;
            border-bottom: 2px solid black;
            background-color: burlywood;
        }
        select{
            width: 150px;
            height: 30px;
            border-radius: 5px;
            margin-left: 10px;
            background-color: burlywood;
            border: 1px solid black;

        }

        p{
             font-size: 20px;
             font-family: sans-serif;
        }
        h1{
             font-size: 30px;
             font-family: sans-serif;
        }
        button{
             width:100px;
             height: 20px;
             font-size:15px;
             cursor: pointer;
             border: none;
             border-radius: 5px;
             background-color: brown;
             margin-left: 20px;
        }
        img{
             margin-left: 400px;
             margin-top: 10px;
             background-color: aliceblue;
        }
        </style>
</head>
<body>
    <h1 align="center">3D shape creator</h1>
    <div class="container">

   
    <form method="post" onsubmit="return validateForm()">
        <div class="option">
            <label for="shape">Select shape:</label>
            <select name="shape" id="shape" onchange="updateInputFields()">
                <option value="notselected">Not Selected</option>
                <option value="cube">Cube</option>
                <option value="cylinder">Cylinder</option>
                <option value="pyramid">Pyramid</option>
              
                <option value="diamonds">Diamonds</option> <!-- Added prism option -->
                <!-- Add options for other shapes here -->
            </select>
        </div>
      <div class="function">

     
        <div id="notselected"><p align="center">Select your shape type</p></div>
        <div id="cubeInputs" style="display: none;">
            <label for="">Cube:</label><br>
            <label for="radius" style="margin-right: 10px;">Enter Edge Length:</label>
            <input type="number" name="edge" id="edge">
        </div>
        <div id="cylinderInputs" style="display: none;">
            <label for="">Cylinder:</label><br>
            <label for="radius" style="margin-right: 10px;">Enter Radius:</label>
            <input type="number" name="radius" id="radius">
            <label for="radius" style="margin-right: 10px;">Enter Height:</label>
            <input type="number" name="height" id="height">
        </div>
        <div id="pyramidInputs" style="display: none;"> <!-- Corrected id -->
            <label for="">Pyramid:</label><br>
            <label for="radius" style="margin-right: 10px;">Enter Base:</label>
            <input type="number" name="base" id="base">
             <label for="radius" style="margin-right: 10px;">Enter Height:</label>
               <input type="number" name="pyramid_height" id="pyramid_height"> <!-- Corrected id -->
        </div>
        <div id="halfsphereInputs" style="display: none;">

            Enter radius:
            <input type="number" name="halfsphere_radius" id="halfsphere_radius">
           
        </div>
        <div id="diamondsInputs" style="display: none;"> <!-- Added prism inputs -->
            <label for="">Diamond:</label><br>
            <label for="radius" style="margin-right: 10px;">Enter Diagonal:</label>
          
            <input type="number" name="diagonal" id="diagonal">
            <label for="radius" style="margin-right: 10px;">Enter Height:</label>
            <input type="number" name="diamond_height" id="diamond_height">
        </div>
    </div>
        <button type="submit">Draw</button>
    </form>
    </div>
    
    
    {% if image_url %}
    <img src="{{ image_url }}" alt="Shape Image">
    {% endif %}

<script>
    function updateInputFields() {
        var shape = document.getElementById('shape').value;
        var notselected=document.getElementById('notselected');
        var cubeInputs = document.getElementById('cubeInputs');
        var cylinderInputs = document.getElementById('cylinderInputs');
        var pyramidInputs = document.getElementById('pyramidInputs');
        var halfsphereInputs = document.getElementById('halfsphereInputs');
        var diamondsInputs = document.getElementById('diamondsInputs'); // Added
         if (shape=='notselected'){
            notselected.style.display='';
            cubeInputs.style.display = 'none';
            cylinderInputs.style.display = 'none';
            pyramidInputs.style.display = 'none';
            halfsphereInputs.style.display = 'none';
            diamondsInputs .style.display = 'none';
         }
       else if (shape === 'cube') {
            cubeInputs.style.display = '';
            notselected.style.display='none';
            cylinderInputs.style.display = 'none';
            pyramidInputs.style.display = 'none';
            halfsphereInputs.style.display = 'none';
            diamondsInputs .style.display = 'none'; // Added
        } else if (shape === 'cylinder') {
            cubeInputs.style.display = 'none';
            cylinderInputs.style.display = '';
            pyramidInputs.style.display = 'none';
            halfsphereInputs.style.display = 'none';
            diamondsInputs .style.display = 'none'; // Added
            notselected.style.display='none';
        } else if (shape === 'pyramid') {
            cubeInputs.style.display = 'none';
            cylinderInputs.style.display = 'none';
            pyramidInputs.style.display = '';
            halfsphereInputs.style.display = 'none';
            diamondsInputs .style.display = 'none'; // Added
            notselected.style.display='none';
        } else if (shape === 'halfsphere') {
            cubeInputs.style.display = 'none';
            cylinderInputs.style.display = 'none';
            pyramidInputs.style.display = 'none';
            halfsphereInputs.style.display = '';
            diamondsInputs .style.display = 'none'; // Added
            notselected.style.display='none';
        } else if (shape === 'diamonds') { // Added
            cubeInputs.style.display = 'none';
            cylinderInputs.style.display = 'none';
            pyramidInputs.style.display = 'none';
            halfsphereInputs.style.display = 'none';
            diamondsInputs .style.display = ''; 
            notselected.style.display='none';
        } 
    }

    function validateForm() {
        var shape = document.getElementById('shape').value;

        if (shape === 'cube') {
            return document.getElementById('edge').value.trim() !== '';
        } else if (shape === 'cylinder') {
            return document.getElementById('radius').value.trim() !== '' &&
                   document.getElementById('height').value.trim() !== '';
        } else if (shape === 'pyramid') {
            return document.getElementById('base').value.trim() !== '' &&
                   document.getElementById('pyramid_height').value.trim() !== '';
        } else if (shape === 'halfsphere') {
            return document.getElementById('halfsphere_radius').value.trim() !== '' 
                   
        } else if (shape === 'diamonds') { // Added
            return document.getElementById('diagonal').value.trim() !== '' &&
                   document.getElementById('diamond_height').value.trim() !== ''; 
        }

        return true;  // For other shapes or if shape is not selected
    }
</script>
</body>
</html>

// Backend logic
from flask import Flask, render_template, request, url_for
from PIL import Image, ImageDraw
import os
import uuid
from math import sqrt, pi, sin, cos

app = Flask(__name__)

@app.route('/', methods=['GET', 'POST'])
def index():
    image_url=None
    if request.method=='POST':
        shape=request.form.get('shape')
        if shape=='cube':
            edge=int(request.form.get('edge'))
            filename=draw_cube(edge)
        elif shape=='cylinder':
            radius=int(request.form.get('radius'))
            height=int(request.form.get('height'))
            filename=draw_cylinder(radius, height)
        elif shape=='pyramid':
            base=int(request.form.get('base'))
            pyramid_height=int(request.form.get('pyramid_height'))
            filename=draw_pyramid(base, pyramid_height)
        elif shape=='diamonds':
            diagonal=int(request.form.get('diagonal'))
            diamond_height=int(request.form.get('diamond_height'))
            filename=draw_diamond(diagonal, diamond_height)
        elif shape=='halfsphere':
            halfsphere_radius=int(request.form.get('halfsphere_radius'))
            filename=draw_half_sphere(halfsphere_radius)
       
            
        image_url = url_for('static', filename=filename)
        return render_template('YOUR HTML FORM VIEW LINK', image_url=image_url)
    return render_template('33day.html')

def draw_cube(edge):
    image = Image.new('RGB', (500, 500), 'aliceblue')
    draw = ImageDraw.Draw(image)

    cx, cy = 250, 250  # Center of the canvas
    size = edge

    # Calculate the vertices of the cube
    half_size = size / 2

    # Front face vertices
    v1 = (cx - half_size, cy - half_size)  # Front top left
    v2 = (cx + half_size, cy - half_size)  # Front top right
    v3 = (cx + half_size, cy + half_size)  # Front bottom right
    v4 = (cx - half_size, cy + half_size)  # Front bottom left

    # Back face vertices (shifted back along the z-axis)
    v5 = (cx - half_size / 2, cy - half_size / 2)  # Back top left
    v6 = (cx + half_size / 2, cy - half_size / 2)  # Back top right
    v7 = (cx + half_size / 2, cy + half_size / 2)  # Back bottom right
    v8 = (cx - half_size / 2, cy + half_size / 2)  # Back bottom left

    # Draw the front face
    draw.polygon([v1, v2, v3, v4], outline='black')

    # Draw the back face
    draw.polygon([v5, v6, v7, v8], outline='black')

    # Connect the corresponding vertices to draw the edges
    draw.line([v1, v5], fill='black')
    draw.line([v2, v6], fill='black')
    draw.line([v3, v7], fill='black')
    draw.line([v4, v8], fill='black')

    # Save the image
    filename = f"shape_{uuid.uuid4().hex}.png"
    filepath = os.path.join('static', filename)
    image.save(filepath)
    return filename

def draw_cylinder(radius, height):
    image = Image.new('RGB', (500, 500), 'aliceblue')
    draw = ImageDraw.Draw(image)

    cx, cy = 250, 250  # Center of the canvas

    # Draw the cylinder
    draw.ellipse([cx - radius, cy - radius, cx + radius, cy + radius], outline='black')  # Bottom circle
    draw.ellipse([cx - radius, cy + height - radius, cx + radius, cy + height + radius], outline='black')  # Top circle
    draw.line([cx - radius, cy, cx - radius, cy + height], fill='black')  # Vertical lines
    draw.line([cx + radius, cy, cx + radius, cy + height], fill='black')

    # Save the image
    filename = f"shape_{uuid.uuid4().hex}.png"
    filepath = os.path.join('static', filename)
    image.save(filepath)
    return filename

def draw_pyramid(base, pyramid_height):
    image = Image.new('RGB', (500, 500), 'aliceblue')
    draw = ImageDraw.Draw(image)

    cx, cy = 250, 250  # Center of the canvas

    # Calculate vertices of the pyramid base
    half_base = base / 2
    v1 = (cx - half_base, cy - half_base)
    v2 = (cx + half_base, cy - half_base)
    v3 = (cx + half_base, cy + half_base)
    v4 = (cx - half_base, cy + half_base)

    # Calculate the apex of the pyramid
    apex = (cx, cy - pyramid_height)

    # Draw the base of the pyramid
    draw.polygon([v1, v2, v3, v4], outline='black')

    # Draw lines from the apex to the base vertices
    draw.line([apex, v1], fill='black')
    draw.line([apex, v2], fill='black')
    draw.line([apex, v3], fill='black')
    draw.line([apex, v4], fill='black')

    # Save the image
    filename = f"shape_{uuid.uuid4().hex}.png"
    filepath = os.path.join('static', filename)
    image.save(filepath)
    return filename

def draw_diamond(diagonal, diamond_height):
    image = Image.new('RGB', (500, 500), 'aliceblue')
    draw = ImageDraw.Draw(image)

    cx, cy = 250, 250  # Center of the canvas

    # Calculate vertices of the diamond
    half_diagonal = diagonal / 2
    half_height = diamond_height / 2
    v1 = (cx - half_diagonal, cy)  # Left
    v2 = (cx, cy - half_height)     # Top
    v3 = (cx + half_diagonal, cy)  # Right
    v4 = (cx, cy + half_height)     # Bottom

    # Draw the diamond
    draw.line([v1, v2], fill='black')
    draw.line([v2, v3], fill='black')
    draw.line([v3, v4], fill='black')
    draw.line([v4, v1], fill='black')

    # Save the image
    filename = f"shape_{uuid.uuid4().hex}.png"
    filepath = os.path.join('static', filename)
    image.save(filepath)
    return filename

def draw_half_sphere(halfsphere_radius):
    image = Image.new('RGB', (500, 500), 'aliceblue')
    draw = ImageDraw.Draw(image)

    cx, cy = 250, 250  # Center of the canvas

    # Draw half sphere
    draw.ellipse([cx - halfsphere_radius, cy - halfsphere_radius, cx + halfsphere_radius, cy + halfsphere_radius], outline='black')

    # Save the image
    filename = f"shape_{uuid.uuid4().hex}.png"
    filepath = os.path.join('static', filename)
    image.save(filepath)
    return filename

if __name__ == '__main__':
    app.run(debug=True)

